const http = require("node:http"); // mÃ³dulo nativo do node para lidar com requisiÃ§Ãµes http
const fs = require("node:fs").promises; // mÃ³dulo do node para trabalhar com arquivos

const host = "localhost"; // endereÃ§o URL do servidor
const port = 3000; // porta que vai rodar o servidor

// FunÃ§Ã£o para ouvir as requisiÃ§Ãµes, chamado "listener"
// Determina o que acontece quando vocÃª acessa uma rota do servidor
const requestListener = (_req, res) => {
  // req Ã© o objeto que vem de fora pra dentro da API
  // res Ã© objeto que sai da API pra fora
  res.writeHead(200); // devolve no cabeÃ§alho o status 200
  res.end("Meu primeiro servidor"); // finaliza a resposta devolvendo um conteÃºdo de texto
};

const helloWorld = (_req, res) => {
  let message = { message: "Hello, World " };
  message = JSON.stringify(message); // transforma o objeto em JSON

  res.setHeader("Content-Type", "application/json"); // define o retorno como conteÃºdo JSON
  res.writeHead(200);
  res.end(message);
};

// Envia HTML atravÃ©s do endpoint
const sendHtmlPage = (_req, res) => {
  res.setHeader("Content-Type", "text/html"); //define o retorno como de tipo html
  res.writeHead(200);

  res.end(`
  <!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Teste</title>
  </head>
  <body>
    <h1>PÃ¡gina de Teste - Enviando HTML puro</h1>
  </body>
</html>
  `);
};

const sendHtmlFile = async (_req, res) => {
  // fs.readFile lÃª arquivos de maneira assÃ­ncrona (mais performÃ¡tico)
  const page = await fs.readFile(__dirname + "/index.html"); // caminho do arquivo html

  res.setHeader("Content-Type", "text/html");
  res.writeHead(200); // OK

  res.end(page);
};

// Cria o servidor HTTP
const server = http.createServer(async (req, res) => {
  if (req.url === "/" && req.method === "GET") {
    // se a url for "/" e o mÃ©todo for "GET" (deve estar maiÃºsculo)
    requestListener(req, res);
  }
  if (req.url === "/hello" && req.method === "GET") {
    helloWorld(req, res);
  }
  if (req.url === "/html" && req.method === "GET") {
    sendHtmlPage(req, res);
  }
  if (req.url === "/page" && req.method === "GET") {
    await sendHtmlFile(req, res);
  }
});

// Inicia o servidor
server.listen(port, host, () => {
  console.log(`ðŸš€ O servidor estÃ¡ rodando em http://${host}:${port}`);
});
